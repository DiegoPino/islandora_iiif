<?php

/**
* @file
* Hooks and callbacks for this module.
*/

/**
* Implements hook_menu().
*/
function islandora_iiif_menu() {
  return array(
    'islandora_iiif/%islandora_object/%/%/%/%' => array(
      'page callback' => 'islandora_iiif_proxied_image_response',
      'page arguments' => array(1,2,3,4,5),
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 1),
      'load arguments' => array(1),
    ),
    'islandora_iiif/%islandora_object/info.json' => array(
      'page callback' => 'islandora_iiif_proxied_info_response',
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
      'access callback' => 'islandora_object_access',
      'access arguments' => array(ISLANDORA_VIEW_OBJECTS, 1),
      'load arguments' => array(1),
    ),
  );
}

/**
* Our Proxied callback handler()
*/
function islandora_iiif_proxied_image_response(AbstractObject $object, $region, $size, $rotation = 0, $qualityandformat = "default.jp2") {
  global $base_root;
  module_load_include('inc', 'islandora_iiif', 'includes/utils');
  $allowedExtensions = array('png', 'jpg', 'jp2');
  $qualityandformatparsed = islandora_iiif_safefile($qualityandformat, $allowedExtensions);
  //@TODO implement a hook here to allow per CMODEL backend \
  // $hooks = islandora_build_hook_list(ISLANDORA_IMAGESERVER_HOOK, $object->models);

  $iiif_request = array(
    "pid" => $object->id,
    "region" => $region,
    "size" => $size, 
    "rotation" => $rotation,
    "quality" => $qualityandformatparsed[0],
    "format" => $qualityandformatparsed[1]
  );
  

  module_load_include('inc', 'islandora', 'includes/authtokens');
  $uri_params = array(
    'absolute' => TRUE,
    'query' => array( 
      'token' => islandora_get_object_token($object->id, "OBJ", 2),
    ),
  );
  $metadata_response = islandora_iiif_djatoka_metadata_request($object->id);
  //dpm($iiif_request);
  //dpm($metadata_response);
  $theresponsecode = (int)$metadata_response->code;
  //dpm($theresponsecode);
  if ($theresponsecode >= 200 && $theresponsecode < 400) {
    $thatthing = islandora_iiif_djatoka_region(json_decode($metadata_response->data, true), $iiif_request);
    drupal_add_http_header('Content-Type', 'image/jp2');
    //@TODO hookify this so others can alter the canonical 
    drupal_add_http_header('Link', '<'.$base_root.'islandora_iiif/'.urlencode($object->id).'full/max/0/default.jp2>;rel="canonical"');
    $theimage = islandora_iiif_djatoka_image_request($object->id, $thatthing);
    print $theimage->data;
  }
  else {
    drupal_add_http_header('Status', '404 Not Found');
  }
  drupal_page_footer();
}

/**
* Our Proxied callback handler()
*/
function islandora_iiif_proxied_info_response(AbstractObject $object) {
  module_load_include('inc', 'islandora_iiif', 'includes/utils');
  global $base_root;

  //@TODO implement a hook here to allow per CMODEL/Context backend.
  //$hooks = islandora_build_hook_list(ISLANDORA_IMAGESERVER_HOOK, $object->models);
  $metadata_response = islandora_iiif_djatoka_metadata_request($object->id);
  
  $theresponsecode = (int)$metadata_response->code;
  if ($theresponsecode >= 200 && $theresponsecode < 400) {
    drupal_add_http_header('Content-Type', 'application/json');
    //@TODO hookify this so others can alter the canonical 
    drupal_add_http_header('Link', '<'.$base_root.'islandora_iiif/'.urlencode($object->id).'full/max/0/default.jp2>;rel="canonical"');
      
    $info = islandora_iiif_adoredjatoka_info_json(json_decode($metadata_response->data, true));
    print json_encode($info, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP | JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
  } 
  else {
    drupal_add_http_header('Status', '404 Not Found');
  }
  drupal_page_footer();
}




function islandora_iiif_file_url_alter(&$uri) {
  global $user;

  // User 1 will always see the local file in this example.
  if ($user->uid == 1) {
    return;
  }
 
  $cdn1 = 'http://cdn1.example.com';
  $cdn2 = 'http://cdn2.example.com';
  $cdn_extensions = array('css', 'js', 'gif', 'jpg', 'jpeg', 'png');

  // Most CDNs don't support private file transfers without a lot of hassle,
  // so don't support this in the common case.
  $schemes = array('public');

  $scheme = file_uri_scheme($uri);

  // Only serve shipped files and public created files from the CDN.
  if (!$scheme || in_array($scheme, $schemes)) {
    // Shipped files.
    if (!$scheme) {
      $path = $uri;
    }
    // Public created files.
    else {
      $wrapper = file_stream_wrapper_get_instance_by_scheme($scheme);
      $path = $wrapper->getDirectoryPath() . '/' . file_uri_target($uri);
    }

    // Clean up Windows paths.
    $path = str_replace('\\', '/', $path);

    // Serve files with one of the CDN extensions from CDN 1, all others from
    // CDN 2.
    $pathinfo = pathinfo($path);
    if (isset($pathinfo['extension']) && in_array($pathinfo['extension'], $cdn_extensions)) {
      $uri = $cdn1 . '/' . $path;
    }
    else {
      $uri = $cdn2 . '/' . $path;
    }
  }
}